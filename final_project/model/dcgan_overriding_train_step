{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"dcgan_overriding_train_step","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/generative/ipynb/dcgan_overriding_train_step.ipynb","timestamp":1638338010947}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"WznZoCF2jaFC"},"source":["# DCGAN to generate face images\n","\n","**Author:** [fchollet](https://twitter.com/fchollet)<br>\n","**Date created:** 2019/04/29<br>\n","**Last modified:** 2021/01/01<br>\n","**Description:** A simple DCGAN trained using `fit()` by overriding `train_step` on CelebA images."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0SA64TUqENS1","executionInfo":{"status":"ok","timestamp":1638421219863,"user_tz":-540,"elapsed":405,"user":{"displayName":"성신","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj3DYvWYn1gPb-VcIjVUL3X5SqrqjqEyd9JTOrpow=s64","userId":"14581914920101858851"}},"outputId":"f61a74d2-6d35-44d5-b808-b4b4e62c8d60"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","metadata":{"id":"kYe4AQcsjaFF"},"source":["## Setup"]},{"cell_type":"code","metadata":{"id":"t7_RIHjDjaFG"},"source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","import numpy as np\n","\n","\n","\n","import matplotlib.pyplot as plt\n","import os\n","import gdown\n","from zipfile import ZipFile"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2G0ppj1ljaFH"},"source":["## Prepare CelebA data\n","\n","We'll use face images from the CelebA dataset, resized to 64x64."]},{"cell_type":"code","metadata":{"id":"MMwicW5IjaFH"},"source":["# os.makedirs(\"celeba_gan\")\n","\n","# url = \"https://drive.google.com/uc?id=1O7m1010EJjLE5QxLZiM9Fpjs7Oj6e684\"\n","# output = \"celeba_gan/data.zip\"\n","# gdown.download(url, output, quiet=True)\n","\n","# with ZipFile(\"celeba_gan/data.zip\", \"r\") as zipobj:\n","#     zipobj.extractall(\"celeba_gan\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Txi5b6mvjaFI"},"source":["Create a dataset from our folder, and rescale the images to the [0-1] range:"]},{"cell_type":"code","metadata":{"id":"wZ-MCfKKjaFI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638421230368,"user_tz":-540,"elapsed":7257,"user":{"displayName":"성신","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj3DYvWYn1gPb-VcIjVUL3X5SqrqjqEyd9JTOrpow=s64","userId":"14581914920101858851"}},"outputId":"4d728ce8-4db0-43cc-dffb-ea41bf1e728d"},"source":["dataset = keras.preprocessing.image_dataset_from_directory(\n","    \"/content/drive/MyDrive/final_project_team8/킥보드 탑승 예시사진/make/make_yes\", label_mode=None, image_size=(64, 64), batch_size=32\n",")\n","dataset = dataset.map(lambda x: x / 255.0)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 595 files belonging to 1 classes.\n"]}]},{"cell_type":"markdown","metadata":{"id":"juvaEnm9jaFJ"},"source":["Let's display a sample image:"]},{"cell_type":"code","metadata":{"id":"eM5dcT6KjaFJ","colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"status":"ok","timestamp":1638421327629,"user_tz":-540,"elapsed":97273,"user":{"displayName":"성신","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj3DYvWYn1gPb-VcIjVUL3X5SqrqjqEyd9JTOrpow=s64","userId":"14581914920101858851"}},"outputId":"ccf623a3-2cd7-44e2-df1d-f1630722f102"},"source":["\n","for x in dataset:\n","    plt.axis(\"off\")\n","    plt.imshow((x.numpy() * 255).astype(\"int32\")[0])\n","    break\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"9DDtTmyVjaFK"},"source":["## Create the discriminator\n","\n","It maps a 64x64 image to a binary classification score."]},{"cell_type":"code","metadata":{"id":"XrzCFR-kjaFK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638421327630,"user_tz":-540,"elapsed":21,"user":{"displayName":"성신","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj3DYvWYn1gPb-VcIjVUL3X5SqrqjqEyd9JTOrpow=s64","userId":"14581914920101858851"}},"outputId":"2e5eec46-ad1f-4896-fc5a-efd91473cd1e"},"source":["discriminator = keras.Sequential(\n","    [\n","        keras.Input(shape=(64, 64, 3)),\n","        layers.Conv2D(64, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2D(128, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2D(128, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Flatten(),\n","        layers.Dropout(0.2),\n","        layers.Dense(1, activation=\"sigmoid\"),\n","    ],\n","    name=\"discriminator\",\n",")\n","discriminator.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"discriminator\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 32, 32, 64)        3136      \n","                                                                 \n"," leaky_re_lu (LeakyReLU)     (None, 32, 32, 64)        0         \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 16, 16, 128)       131200    \n","                                                                 \n"," leaky_re_lu_1 (LeakyReLU)   (None, 16, 16, 128)       0         \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 8, 8, 128)         262272    \n","                                                                 \n"," leaky_re_lu_2 (LeakyReLU)   (None, 8, 8, 128)         0         \n","                                                                 \n"," flatten (Flatten)           (None, 8192)              0         \n","                                                                 \n"," dropout (Dropout)           (None, 8192)              0         \n","                                                                 \n"," dense (Dense)               (None, 1)                 8193      \n","                                                                 \n","=================================================================\n","Total params: 404,801\n","Trainable params: 404,801\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"btc3BPUkjaFK"},"source":["## Create the generator\n","\n","It mirrors the discriminator, replacing `Conv2D` layers with `Conv2DTranspose` layers."]},{"cell_type":"code","metadata":{"id":"CUNPRiwljaFL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638421327630,"user_tz":-540,"elapsed":15,"user":{"displayName":"성신","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj3DYvWYn1gPb-VcIjVUL3X5SqrqjqEyd9JTOrpow=s64","userId":"14581914920101858851"}},"outputId":"54d26f50-88ac-46ff-853e-43d2945dae1d"},"source":["latent_dim = 128\n","\n","generator = keras.Sequential(\n","    [\n","        keras.Input(shape=(latent_dim,)),\n","        layers.Dense(8 * 8 * 128),\n","        layers.Reshape((8, 8, 128)),\n","        layers.Conv2DTranspose(128, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2DTranspose(256, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2DTranspose(512, kernel_size=4, strides=2, padding=\"same\"),\n","        layers.LeakyReLU(alpha=0.2),\n","        layers.Conv2D(3, kernel_size=5, padding=\"same\", activation=\"sigmoid\"),\n","    ],\n","    name=\"generator\",\n",")\n","generator.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"generator\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_1 (Dense)             (None, 8192)              1056768   \n","                                                                 \n"," reshape (Reshape)           (None, 8, 8, 128)         0         \n","                                                                 \n"," conv2d_transpose (Conv2DTra  (None, 16, 16, 128)      262272    \n"," nspose)                                                         \n","                                                                 \n"," leaky_re_lu_3 (LeakyReLU)   (None, 16, 16, 128)       0         \n","                                                                 \n"," conv2d_transpose_1 (Conv2DT  (None, 32, 32, 256)      524544    \n"," ranspose)                                                       \n","                                                                 \n"," leaky_re_lu_4 (LeakyReLU)   (None, 32, 32, 256)       0         \n","                                                                 \n"," conv2d_transpose_2 (Conv2DT  (None, 64, 64, 512)      2097664   \n"," ranspose)                                                       \n","                                                                 \n"," leaky_re_lu_5 (LeakyReLU)   (None, 64, 64, 512)       0         \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 64, 64, 3)         38403     \n","                                                                 \n","=================================================================\n","Total params: 3,979,651\n","Trainable params: 3,979,651\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"1AOnM-xIjaFL"},"source":["## Override `train_step`"]},{"cell_type":"code","metadata":{"id":"zzM7pYJujaFL"},"source":["\n","class GAN(keras.Model):\n","    def __init__(self, discriminator, generator, latent_dim):\n","        super(GAN, self).__init__()\n","        self.discriminator = discriminator\n","        self.generator = generator\n","        self.latent_dim = latent_dim\n","\n","    def compile(self, d_optimizer, g_optimizer, loss_fn):\n","        super(GAN, self).compile()\n","        self.d_optimizer = d_optimizer\n","        self.g_optimizer = g_optimizer\n","        self.loss_fn = loss_fn\n","        self.d_loss_metric = keras.metrics.Mean(name=\"d_loss\")\n","        self.g_loss_metric = keras.metrics.Mean(name=\"g_loss\")\n","\n","    @property\n","    def metrics(self):\n","        return [self.d_loss_metric, self.g_loss_metric]\n","\n","    def train_step(self, real_images):\n","        # Sample random points in the latent space\n","        batch_size = tf.shape(real_images)[0]\n","        random_latent_vectors = tf.random.normal(shape=(batch_size, self.latent_dim))\n","\n","        # Decode them to fake images\n","        generated_images = self.generator(random_latent_vectors)\n","\n","        # Combine them with real images\n","        combined_images = tf.concat([generated_images, real_images], axis=0)\n","\n","        # Assemble labels discriminating real from fake images\n","        labels = tf.concat(\n","            [tf.ones((batch_size, 1)), tf.zeros((batch_size, 1))], axis=0\n","        )\n","        # Add random noise to the labels - important trick!\n","        labels += 0.05 * tf.random.uniform(tf.shape(labels))\n","\n","        # Train the discriminator\n","        with tf.GradientTape() as tape:\n","            predictions = self.discriminator(combined_images)\n","            d_loss = self.loss_fn(labels, predictions)\n","        grads = tape.gradient(d_loss, self.discriminator.trainable_weights)\n","        self.d_optimizer.apply_gradients(\n","            zip(grads, self.discriminator.trainable_weights)\n","        )\n","\n","        # Sample random points in the latent space\n","        random_latent_vectors = tf.random.normal(shape=(batch_size, self.latent_dim))\n","\n","        # Assemble labels that say \"all real images\"\n","        misleading_labels = tf.zeros((batch_size, 1))\n","\n","        # Train the generator (note that we should *not* update the weights\n","        # of the discriminator)!\n","        with tf.GradientTape() as tape:\n","            predictions = self.discriminator(self.generator(random_latent_vectors))\n","            g_loss = self.loss_fn(misleading_labels, predictions)\n","        grads = tape.gradient(g_loss, self.generator.trainable_weights)\n","        self.g_optimizer.apply_gradients(zip(grads, self.generator.trainable_weights))\n","\n","        # Update metrics\n","        self.d_loss_metric.update_state(d_loss)\n","        self.g_loss_metric.update_state(g_loss)\n","        return {\n","            \"d_loss\": self.d_loss_metric.result(),\n","            \"g_loss\": self.g_loss_metric.result(),\n","        }\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XjItYOjajaFM"},"source":["## Create a callback that periodically saves generated images"]},{"cell_type":"code","metadata":{"id":"YWLZmwi2jaFM"},"source":["\n","class GANMonitor(keras.callbacks.Callback):\n","    def __init__(self, num_img=3, latent_dim=128):\n","        self.num_img = num_img\n","        self.latent_dim = latent_dim\n","\n","    def on_epoch_end(self, epoch, logs=None):\n","        random_latent_vectors = tf.random.normal(shape=(self.num_img, self.latent_dim))\n","        generated_images = self.model.generator(random_latent_vectors)\n","        generated_images *= 255\n","        generated_images.numpy()\n","        for i in range(self.num_img):\n","            img = keras.preprocessing.image.array_to_img(generated_images[i])\n","            img.save(f\"/content/drive/MyDrive/final_project_team8/킥보드 탑승 예시사진/dcgan/{i}.jpg\")\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ix-UjYPWjaFM"},"source":["## Train the end-to-end model"]},{"cell_type":"code","metadata":{"id":"VNL2m_MpjaFN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638421464792,"user_tz":-540,"elapsed":137172,"user":{"displayName":"성신","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj3DYvWYn1gPb-VcIjVUL3X5SqrqjqEyd9JTOrpow=s64","userId":"14581914920101858851"}},"outputId":"3b387d9d-c240-4915-8228-dbab4649147d"},"source":["epochs = 1  # In practice, use ~100 epochs\n","\n","gan = GAN(discriminator=discriminator, generator=generator, latent_dim=latent_dim)\n","gan.compile(\n","    d_optimizer=keras.optimizers.Adam(learning_rate=0.0001),\n","    g_optimizer=keras.optimizers.Adam(learning_rate=0.0001),\n","    loss_fn=keras.losses.BinaryCrossentropy(),\n",")\n","\n","gan.fit(\n","    dataset, epochs=2, callbacks=[GANMonitor(num_img=10, latent_dim=latent_dim)]\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/2\n","19/19 [==============================] - 117s 6s/step - d_loss: 0.6393 - g_loss: 0.7979\n","Epoch 2/2\n","19/19 [==============================] - 13s 672ms/step - d_loss: 0.5215 - g_loss: 0.7325\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7efc45db94d0>"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"nDuo6_mqjaFN"},"source":["Some of the last generated images around epoch 30\n","(results keep improving after that):\n","\n","![results](https://i.imgur.com/h5MtQZ7l.png)"]},{"cell_type":"code","metadata":{"id":"g92BTvPRugRw","colab":{"base_uri":"https://localhost:8080/","height":245},"executionInfo":{"status":"error","timestamp":1638421465363,"user_tz":-540,"elapsed":575,"user":{"displayName":"성신","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj3DYvWYn1gPb-VcIjVUL3X5SqrqjqEyd9JTOrpow=s64","userId":"14581914920101858851"}},"outputId":"76976a8b-b2d2-4b4a-a6cb-7abcf9ac33f7"},"source":["checkpoint_dir = '/content/drive/MyDrive/final_project_team8/성신/Model' \n","checkpoint_prefix = os.path.join(checkpoint_dir, \"ckpt\") \n","checkpoint = tf.train.Checkpoint(generator_optimizer = g_optimizer, \n","                                 discriminator_optimizer=d_optimizer, \n","                                 generator=generator, discriminator=discriminator)\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-67a1a8ffbbdd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mcheckpoint_dir\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'/content/drive/MyDrive/final_project_team8/성신/Model'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mcheckpoint_prefix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcheckpoint_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ckpt\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m checkpoint = tf.train.Checkpoint(generator_optimizer = g_optimizer, \n\u001b[0m\u001b[1;32m      4\u001b[0m                                  \u001b[0mdiscriminator_optimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0md_optimizer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                                  generator=generator, discriminator=discriminator)\n","\u001b[0;31mNameError\u001b[0m: name 'g_optimizer' is not defined"]}]},{"cell_type":"code","metadata":{"id":"Qo-V5gXkgZFr"},"source":[""],"execution_count":null,"outputs":[]}]}